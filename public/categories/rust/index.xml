<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Café &amp; Tapioca</title>
    <link>http://localhost:1313/categories/rust/</link>
    <description>Recent content in Rust on Café &amp; Tapioca</description>
    <generator>Hugo</generator>
    <language>pt-br</language>
    <lastBuildDate>Tue, 03 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust Ownership</title>
      <link>http://localhost:1313/post/2024/12/03/rust-ownership/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2024/12/03/rust-ownership/</guid>
      <description>&lt;p&gt;Ao invés de depender de garbage collection, que existem em linguagem de alto nível como Java e Python, ou de depender de alocação de memória explícita como C; o Rust executa isso de uma forma diferente: usando &amp;ldquo;ownership&amp;rdquo; que são checadas em tempo de compilação, caso alguma regra seja quebrada nesse sentido o programa não vai compilar.&lt;/p&gt;&#xA;&lt;h2 id=&#34;heap--stack&#34;&gt;Heap &amp;amp; Stack&lt;/h2&gt;&#xA;&lt;p&gt;The heap is less organized: when you put data on the heap, you request a certain amount of space. The memory allocator finds an empty spot in the heap that is big enough, marks it as being in use, and returns a &lt;em&gt;pointer&lt;/em&gt;, which is the address of that location. This process is called &lt;em&gt;allocating on the heap&lt;/em&gt; and is sometimes abbreviated as just &lt;em&gt;allocating&lt;/em&gt; (pushing values onto the stack is not considered allocating). Because the pointer to the heap is a known, fixed size, you can store the pointer on the stack, but when you want the actual data, you must follow the pointer. Think of being seated at a restaurant. When you enter, you state the number of people in your group, and the host finds an empty table that fits everyone and leads you there. If someone in your group comes late, they can ask where you’ve been seated to find you.&lt;/p&gt;</description>
    </item>
    <item>
      <title>First steps into Rust</title>
      <link>http://localhost:1313/post/2024/12/02/first-steps-into-rust/</link>
      <pubDate>Mon, 02 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2024/12/02/first-steps-into-rust/</guid>
      <description>&lt;h1 id=&#34;why-im-learning-rust&#34;&gt;Why I&amp;rsquo;m learning Rust?&lt;/h1&gt;&#xA;&lt;p&gt;Basically, I was planning on studying compilers, interpreters and how programming languages work on the low level part.&lt;/p&gt;&#xA;&lt;p&gt;I tought that Rust was a good choice because it has large and active open source community, and it&amp;rsquo;s simpler than C and C++. I had sometime in last year learning C, was a pain in the ass, but I recognize the impact that it had in my understanding of how a computer memory works on the low level.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
