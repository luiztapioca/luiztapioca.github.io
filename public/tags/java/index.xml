<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Café &amp; Tapioca</title>
    <link>http://localhost:1313/blog/tags/java/</link>
    <description>Recent content in Java on Café &amp; Tapioca</description>
    <generator>Hugo</generator>
    <language>pt-br</language>
    <lastBuildDate>Fri, 05 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Entendendo protocolos TCP em Java.</title>
      <link>http://localhost:1313/blog/posts/20250905/</link>
      <pubDate>Fri, 05 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/posts/20250905/</guid>
      <description>&lt;p&gt;Teste&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring: IoC, DI &amp; Beans</title>
      <link>http://localhost:1313/blog/posts/20250815/</link>
      <pubDate>Fri, 15 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/posts/20250815/</guid>
      <description>&lt;h2 id=&#34;ioc&#34;&gt;IoC&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;Inversion of Control&amp;rdquo; ou &amp;ldquo;IoC&amp;rdquo; é um princípio dentro da engenharia de software que visa estabelecer um menor acoplamento, &lt;strong&gt;esse baixo acoplamento diz respeito a um código mais abstrato e genérico que cobre a maioria dos casos de uso&lt;/strong&gt;, mas que ainda assim dá liberdade ao programador para extender essas funcionalidades dentro dos seus casos de uso específicos.&lt;/p&gt;&#xA;&lt;p&gt;As vantagens desse tipo de arquitetura são:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;tirar o papel de execução da implementação feita pelo programador;&lt;/li&gt;&#xA;&lt;li&gt;torna mais fácil a refatoração para algum tipo de implementação diferente;&lt;/li&gt;&#xA;&lt;li&gt;maior mudolaridade do código;&lt;/li&gt;&#xA;&lt;li&gt;torna mais fácil o uso de testes com dependências &amp;ldquo;mockadas&amp;rdquo; pelo programador;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;di&#34;&gt;DI&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;&amp;ldquo;Dependency Injection&amp;rdquo; ou &amp;ldquo;DI&amp;rdquo; é uma das formas de se aplicar o princípio de IoC&lt;/strong&gt;, dentro desse padrão jogamos a responsabilidade de &lt;em&gt;injetar&lt;/em&gt; as dependências para o programador, e não para a interface desse código.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Anotações: Spring Boot</title>
      <link>http://localhost:1313/blog/posts/20250328/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/posts/20250328/</guid>
      <description>&lt;h1 id=&#34;prefácio&#34;&gt;Prefácio&lt;/h1&gt;&#xA;&lt;p&gt;Antes de tudo: estudar &lt;em&gt;Spring Boot&lt;/em&gt; parece uma bagunça sem fim, e você não está errado. Estudar &lt;em&gt;Spring Boot&lt;/em&gt; é uma bagunça!&lt;/p&gt;&#xA;&lt;p&gt;Porém, mesmo com minhas dificuldades eu dei meu jeito. Trago aqui todas as minhas anotações relacionadas ao framework que me ajudaram na compreensão dos conceitos menos intuitivos que o framework necessita que o programador saiba para construir uma API de qualidade.&lt;/p&gt;&#xA;&lt;p&gt;Não achei a documentação do framework tão boa para aprender como dizem, então tive que fuçar internet á fora para achar conteúdos que me ajudassem de fato a compreender os conceitos que fundamentam a estrutura de uma aplicação de &lt;em&gt;API RESTful&lt;/em&gt; em &lt;em&gt;Spring Boot + Spring Security&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
